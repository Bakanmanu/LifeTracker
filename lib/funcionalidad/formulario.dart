import './accion.dart';
import 'categoria.dart';
import 'formato_fecha.dart';

///Esta clase sirve para gestionar todos los procesos relacionados con los formularios
///y sirve como de "Clase mediadora" para tener una mayor abstracci√≥n y encapsulaci√≥n
///Tambi√©n, tiene la variable global que guarda todos los formularios que se han ido creando
class GestorFormulario {

  // todo ver si hay que guardar los formularios de la BD en listaFormularios
  List<Formulario> listaFormularios = []; //Variable global que guarda todos los formularios que se han ido creando
  late int indexFormEditar; //esta variable guarda el indice del formulario que se desea editar
  bool isModificar = false; // variable que nos va a servir para elegir la estrategia al rellenar un formulario: crear o modificar

  //List<Categoria> categoriasDLC = []; // Lista que contiene las categor√≠as que se vayan descargando //DEPRECATED


  /// M√©todo para crear un nuevo formulario con los par√°metros que se recojan de la interfaz
  void crearFormulario(int estadoAnimo, List<Categoria> listaCategorias, String campoTexto) {

    //Guardamos primero la fecha actual para que sea lo m√°s cercana posible
    //al momento en el que el usuario pulsa el bot√≥n (porque hay procesamiento despu√©s)
    DateTime fecha = DateTime.now();

    //Comprobamos que el estado de √°nimo es un int entre 1 y 5
    assert(estadoAnimo >= 1 && estadoAnimo <= 5);

    //Guardamos las acciones seleccionadas en la lista "respuestas" de categor√≠a
    for(Categoria cat in listaCategorias){
      cat.actualizarRespuestas(); //todo revisar d√≥nde se actualizan las respuestas
    }

    //Creamos una nueva instancia de formulario
    Formulario form = Formulario(estadoAnimo, listaCategorias, campoTexto, fecha);
    
    //Guardamos el formulario AL PRINCIPIO lista global de formularios
    //todo revisar API: hacer que se suba a la BD, y cuando se valide la operaci√≥n, se guarde en la listaFormularios
    // para hacer como si se guardara en paralelo y no tocar mucha funcionalidad
    listaFormularios.insert(0, form);
  }

  ///M√©todo que edita el formulario
  /// todo revisar API
  void editarFormulario(int estadoAnimo, List<Categoria> listaCategorias, String campoTexto){
    listaFormularios[indexFormEditar].modificarFormulario(estadoAnimo, listaCategorias, campoTexto);
  }

  ///Borra el formulario que se le pasa por par√°metro
  /// todo revisar API
  void borrarFormulario(Formulario form){
    listaFormularios.remove(form);
  }

  ///Pone el valor de √≠ndice en pantallaMostrarFormulario cuando se pulsa
  ///la opci√≥n de editar
  void setIndex(int index){
    indexFormEditar = index;
  }


  /// Devuelve el n√∫mero de formularios que hay
  int getNumeroFormularios(){
    return listaFormularios.length;
  }

  ///Devuelve el formulario correspondiente al √≠ndice en la lista de formularios
  Formulario getFormByIndex(int index){
    return listaFormularios[index]; // todo ver si esto hay que hacerlo en la lista del Usuario
  }

  /// M√©todo que ha de ser llamado para crear un formulario nuevo
  void setStratCrear() => isModificar = false;

  /// M√©todo que ha de ser llamado para modificar un formulario existente
  void setStratModificar() => isModificar = true;

  /// Devuelve el formulario que se va a editar
  Formulario getFormEditar(){
      return listaFormularios[indexFormEditar];
  }

  /// Devuelve un string con lista de acciones == true del formulario dado
  String getRespuestasAcciones(Formulario form){
    String respuestas = '';
    for(Categoria cat in form.listaCategorias){

      // Hemos considerado que no hace falta poner la categor√≠a si no tiene
      // ninguna acci√≥n marcada

      if (cat.respuestas.isEmpty){ // si no hay respuestas, ponemos una raya
        //respuestas += '-\n';
      }
      else { //si hay respuestas, las ponemos

        //IMPRIMIMOS T√çTULO DE CATEGOR√çA
        respuestas += "‚Üí" + cat.enunciado + '\n';

        for(Accion acc in cat.respuestas){
          respuestas += acc.nombre; //T√çTULO DE RESPUESTA
          if(acc == cat.respuestas.last){/*nada*/} //si es el √∫ltimo elemento no a√±adimos nada
          else {respuestas += " / ";} //ponemos una barra para separar si no es el √∫ltimo
        }
        respuestas += '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'; //ponemos barra separadora en caso de haber respuestas
      }
    }

    if (respuestas == ''){ // Si se han dejado las categor√≠as vac√≠as
      respuestas = 'No se ha marcado ninguna acci√≥n üò¨';
    }

    return respuestas;
  }

  /// Devuelve la fecha en formato legible del formulario pasado por par√°metro
  String getFechaFormat(Formulario form){
    return FormatoFecha.getFecha_es_ddmmyyyy_hhmm(form.fecha);
  }

  /// Este m√©todo devuelve todas las categor√≠as que haya (DEFAULT + DLC)
  List<Categoria> generateCategorias(){
    List<Categoria> lista = crearCategoriasDefault();
    //lista += crearCategoriasDLC(); // DEPRECATED
    //lista += categoriasDLC; // metemos las que ya estaban DEPRECATED
    return lista;
  }

  /// Este m√©todo sirve para inicializar una tanda de categor√≠as y acciones predeterminadas
  List<Categoria> crearCategoriasDefault(){
    return [
      Categoria(enunciado: '¬øCu√°nto has dormido?', acciones: [
        Accion(0, "0 horas", false),
        Accion(1, "1-3 horas", false),
        Accion(2, "4-6 horas", false),
        Accion(3, "7-8 horas", false),
        Accion(4, "+8 horas", false),
      ]),
      Categoria(enunciado: 'Calidad del sue√±o', acciones: [
        Accion(0, "Insomnio", false),
        Accion(1, "Mala", false),
        Accion(2, "Neutral", false),
        Accion(3, "Buena", false),
        Accion(4, "Dormir acompa√±ado", false),
      ]),
      Categoria(enunciado: 'Autoestima', acciones: [
        Accion(1, "Muy baja", false),
        Accion(2, "Baja", false),
        Accion(3, "Neutral", false),
        Accion(4, "Alta", false),
        Accion(5, "Muy alta", false),
      ]),
      Categoria(enunciado: 'Productividad', acciones: [
        Accion(1, "Muy baja", false),
        Accion(2, "Baja", false),
        Accion(3, "Neutral", false),
        Accion(4, "Alta", false),
        Accion(5, "Muy alta", false),
      ]),
      Categoria(enunciado: '¬øCu√°nto deporte has hecho?', acciones: [
        Accion(0, "0h", false),
        Accion(1, "0.5h", false),
        Accion(2, "1h", false),
        Accion(3, "1.5h", false),
        Accion(4, "2h", false),
        Accion(5, "+2h", false),
      ],),
      Categoria(enunciado: 'Quehaceres', acciones: [
        Accion(0, "Hacer la compra", false),
        Accion(1, "Hacer la colada", false),
        Accion(2, "Hacer la comida", false),
        Accion(3, "Limpiar el cuarto", false),
        Accion(4, "Barrer la casa", false),
        Accion(5, "Lavar los platos", false),
        Accion(6, "Lavar el coche", false),
      ]),
      Categoria(enunciado: '¬øQu√© has comido?', acciones: [
        Accion(0, "Fruta", false),
        Accion(1, "Verdura", false),
        Accion(2, "Carne", false),
        Accion(3, "Pescao", false),
        Accion(4, "L√°cteos", false),
        Accion(5, "Pasta", false),
        Accion(6, "Arroz", false)
      ]),
      Categoria(enunciado: 'Entretenimiento', acciones: [
        Accion(0, "Echar la siesta", false),
        Accion(1, "Comer con amigos", false),
        Accion(2, "Salir de fiesta", false),
        Accion(3, "Ver una peli/serie", false),
        Accion(4, "Jugar videojuegos", false),
        Accion(5, "Tocar un instrumento", false),
        Accion(6, "Ir de viaje", false)
      ]),
      Categoria(enunciado: '¬øQu√© tiempo hace?', acciones: [
        Accion(0, "Soleado", false),
        Accion(1, "Nublado", false),
        Accion(2, "Lluvia", false),
        Accion(3, "Nieve", false),
        Accion(4, "Granizo", false),
        Accion(5, "Tormenta", false),
        Accion(6, "Calima", false),
        Accion(7, "Fr√≠o", false),
        Accion(8, "Calor", false),
      ],),
    ];
  }

  /// M√©todo para a√±adir packs de categor√≠as descargados
  /// DEPRECATED hasta a√±adir la funcionalidad de descargar Categor√≠as
  void anadirCategoriasDLC(List <Categoria> lista){
    // for (Categoria cat in lista){
    //   categoriasDLC.add(cat); // descomentar el atributo categoriasDLC
    // }
  }

  /// M√©todo de prueba para cargar las categor√≠as DLC
  /// DEPRECATED
  //ESTE M√âTODO A√öN NO SE PUEDE IMPLEMENTAR. Esperar a aplicaci√≥n web
  List<Categoria> crearCategoriasDLC(){
    // La idea es que este m√©todo obtenga de alguna manera una categor√≠a descargada
    return [];
  }

  ///Este m√©todo sirve para debuggear y ver que se crean bien los formularios
  // void mostrarFormularioTerminal(){
  //   Formulario form = listaFormularios.last;
  //
  //   print(form._estadoAnimo);
  //   print(form._campoTexto);
  //
  //   print('ACCI√ìN + BOOL:');
  //   for (Categoria cat in form._listaCategorias){
  //     print('CATEGOR√çA: ' + cat.enunciado);
  //     for (Accion acc in cat.acciones){
  //       acc.activo ? print(acc.nombre + ": TRUE") : print(acc.nombre + ": FALSE");
  //     }
  //   }
  //   print('ACCIONES ACTIVAS:');
  //   for (Categoria cat in form._listaCategorias){
  //     print('CATEGOR√çA: ' + cat.enunciado);
  //     for (Accion acc in cat.respuestas){
  //       print(acc.nombre);
  //     }
  //   }
  //   print(form._fecha);
  // }

}


/// *************CLASE FORMULARIO*******************************************
///Esta clase se encarga de definir los formularios que el usuario tiene que
///rellenar para completar su diario
class Formulario {

  late int _estadoAnimo; // tiene que ser un valor entre 1 y 5
  late List<Categoria> _listaCategorias = []; //Puede estar vac√≠a
  late String _campoTexto;
  late DateTime _fecha;


  //Este constructor rellena todos los par√°metros. Ser√° una clase superior la que
  //determine qu√© y c√≥mo se pasan los par√°metros
  Formulario(int estadoAnimo, List<Categoria> listaCategorias, String campoTexto, DateTime fecha){
    _estadoAnimo = estadoAnimo;
    _listaCategorias = listaCategorias;
    _campoTexto = campoTexto;
    _fecha = fecha;
  }

  ///Este m√©todo permite modificar un formulario ya creado
  void modificarFormulario(int estadoAnimo, List<Categoria> listaCategorias, String campoTexto){
    //Actualizamos las acciones que se hayan podido
    for (Categoria cat in listaCategorias){
      cat.actualizarRespuestas();
    }
    _estadoAnimo = estadoAnimo;
    _listaCategorias = listaCategorias;
    _campoTexto = campoTexto;
    // no se permite modificar la fecha, para que se quede guardada la original

  }

  /// GETTERS
  String get campoTexto => _campoTexto;
  int get estadoAnimo => _estadoAnimo;
  List<Categoria> get listaCategorias => _listaCategorias;
  DateTime get fecha => _fecha;
}